<?xml version="1.0" encoding="utf-8"?>

<!--
  Publishing Service
  ___________________
  
  Defines the configuration for the Publishing Service module.  The Publishing Service module provides an alternative implementation
  of the publishing system, optimised for large, multi-target and geo-distributed deployments.  This is achieved by replacing the 
  PublishManager with a new implementation (Sitecore.Publishing.Service.PublishManager), that delegates most of the work to a service
  component executing in another process.  This service handles the running of publish jobs, the persistence of events relevant for publishing
  and exposes a RESTful HTTP API that powers the UI.  The service must be installed seperately from Sitecore.
  
  The Publishing Service also provides a new, SPEAK-based UI for publishing.
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
    <sitecore role:require="Standalone or ContentManagement">

        <!--
    SITECORE SETTINGS
    -->
        <settings>
            <!-- The HTTP endpoint for the service -->
            <setting name="PublishingServiceUrlRoot">http://localhost:5000/</setting>

            <!-- NOTE!! This will be removed in an upcoming version.  Defines the name of the source database. -->
            <setting name="PublishingServiceDefaultSourceDatabase" value="master"></setting>
        </settings>

        <!-- 
    SITECORE DEPENDENCY INJECTION SERVICE CONFIGURATION
    
    Configures the Sitecore.Publishing.Service.PublishManager to replace the default publish manager.
    -->
        <services>
            <configurator type="Sitecore.Publishing.Service.PublishingServiceConfigurator, Sitecore.Publishing.Service" />
        </services>

        <!--
    SITECORE FACTORY CONFIGURATION
    
    Defines the internal service implementations for the module.
    
    -->
        <publishing.service>
            <!-- 
      # Publish Job Queue Service
      
      Currently the PublishJobQueueService is hosted out of process, accessed via a JSON HTTP API.  So a proxy implementation is configured
      communicate with the API.  This service creates new jobs in a queue, and manages the execution of the queue.  Queued, executed and running
      jobs can be queried.
      -->
            <publishJobQueueService type="Sitecore.Publishing.Service.RemoteProxies.PublishJobQueueServiceRemoteProxy, Sitecore.Publishing.Service" singleInstance="true">
                <param name="client" ref="publishing.service/publishJobServiceHttpClient" />
            </publishJobQueueService>

            <!-- A specialised JSON HTTP client is needed to communicate with the PublishJob API, using the service URL specified in the settings. -->
            <publishJobServiceHttpClient type="Sitecore.Framework.Publishing.Client.Http.PublishJobQueueServiceClient, Sitecore.Framework.Publishing.Client.Http" singleInstance="true">
                <param name="serviceUrlRoot" ref="settings/setting[@name='PublishingServiceUrlRoot']" />
                <param name="client" ref="publishing.service/jsonHttpClient" />
            </publishJobServiceHttpClient>

            <!-- 
      # Maintenance Service
      
      Currently the MaintenanceService is hosted out of process, accessed via a JSON HTTP API.  So a proxy implementation is configured
      communicate with the API. Currently running maintenance tasks can be queried.
      -->
            <maintenanceService type="Sitecore.Publishing.Service.RemoteProxies.MaintenanceServiceRemoteProxy, Sitecore.Publishing.Service" singleInstance="true">
                <param name="client" ref="publishing.service/maintenanceServiceHttpClient" />
            </maintenanceService>

            <!-- A specialised JSON HTTP client is needed to communicate with the PublishJob API, using the service URL specified in the settings. -->
            <maintenanceServiceHttpClient type="Sitecore.Framework.Publishing.Client.Http.MaintenanceServiceClient, Sitecore.Framework.Publishing.Client.Http" singleInstance="true">
                <param name="serviceUrlRoot" ref="settings/setting[@name='PublishingServiceUrlRoot']" />
                <param name="client" ref="publishing.service/jsonHttpClient" />
            </maintenanceServiceHttpClient>

            <!-- 
      # Manifest Service
      
      The ManifestService is hosted out of process, accessed via a JSON HTTP API.  So a proxy implementation is configured to communicate
      with the API.  This service creates new manifests, and enforces the strict workflow for manipulating the manifests.  Manifests and their results can be queried.
      -->
            <manifestService type="Sitecore.Publishing.Service.RemoteProxies.PublishManifestServiceRemoteProxy, Sitecore.Publishing.Service" singleInstance="true">
                <param name="client" ref="publishing.service/manifestServiceHttpClient" />
            </manifestService>

            <!-- A specialised JSON HTTP client is needed to communicate with the Manifest API, using the service URL specified in the settings. -->
            <manifestServiceHttpClient type="Sitecore.Framework.Publishing.Client.Http.ManifestServiceClient, Sitecore.Framework.Publishing.Client.Http" singleInstance="true">
                <param name="serviceUrlRoot" ref="settings/setting[@name='PublishingServiceUrlRoot']" />
                <param name="client" ref="publishing.service/jsonHttpClient" />
            </manifestServiceHttpClient>

            <!-- 
      # Publisher Operation Service
      
      The PublisherOperationService is hosted out of process, accessed via a JSON HTTP API.  So a proxy implementation is configured to communicate
      with the API.  This service collects events (DataEngine Item events converted to 'PublisherOperations') occuring in Sitecore that are relevant to publishing.  
      If the service is unavailable when events are recorded, they are persisted locally on disk, and at a later point in time resent to the service.
      -->
            <publisherOpsService type="Sitecore.Publishing.Service.RemoteProxies.PublisherOperationServiceRemoteProxy, Sitecore.Publishing.Service" singleInstance="true">
                <param name="client" ref="publishing.service/publisherOperationServiceHttpClient" />
                <param name="circuitbreaker" type="Sitecore.Publishing.Service.Recovery.AsyncCircuitBreakerPolicy, Sitecore.Publishing.Service">

                    <!-- A unique name for the circuit breaker policy. -->
                    <param name="name">publishing:addoperations</param>

                    <!-- The number of failed 'add event' requests to the service that are allowed before determining a communication problem. -->
                    <param name="exceptionsAllowedBeforeBreaking">3</param>

                    <!-- The duration until communication with the service is attempted again after a communication problem was last
               detected. -->
                    <param name="secondsBeforRetrying">300</param>
                </param>

                <param name="recoveryStrategy" ref="publishing.service/recoveryStrategy" />
            </publisherOpsService>

            <!-- A specialised JSON HTTP client is needed to communicate with the PublisherOperation API, using the service URL specified in the settings. -->
            <publisherOperationServiceHttpClient type="Sitecore.Framework.Publishing.Client.Http.PublisherOperationServiceClient, Sitecore.Framework.Publishing.Client.Http" singleInstance="true">
                <param name="serviceUrlRoot" ref="settings/setting[@name='PublishingServiceUrlRoot']" />
                <param name="client" ref="publishing.service/jsonHttpClient" />
            </publisherOperationServiceHttpClient>

            <!-- 
      # Publisher Operation Recovery
      
      If there is a communication problem with the service - either network issues, configuration issues or the service is not running - then
      any PublisherOperations created in Sitecore during this period, will be saved locally on disk, and according to the recovery strategy, will
      be re-sent on a given time interval.  If communication with the service is still not possible, the operations will be persisted until communication
      is re-established.  In effect, this is a lightweight alternative to a message bus, that guarantees the delivery of operations to the service,
      without the added effort and complexity of deploying and managing a message bus.
      -->

            <!-- On a regular timed schedule, attempt to re-send PublisherOperations that previously failed to be received by the service. -->
            <recoveryStrategy type="Sitecore.Publishing.Service.Recovery.TimedRecoveryStrategy, Sitecore.Publishing.Service">
                <param name="store" ref="publishing.service/recoveryStore" />

                <!-- Attempt to re-send operations saved in the store every x seconds -->
                <param name="interval">300</param>
            </recoveryStrategy>

            <!-- Persist PublisherOperations on local disk, untill recovered successfully. -->
            <recoveryStore type="Sitecore.Publishing.Service.Recovery.DiskRecoveryStore, Sitecore.Publishing.Service" />

            <!-- 
      # JSON HTTP Client
      
      The service provides JSON HTTP APIs and strongly typed client libraries to them.  The low-level client layer used for all API requests is configured here, giving 
      the oppurtunity for a proxy to be configured.  Primarily this will be useful for using a tool like Fiddler to view the communication between the
      module and the service.
      -->
            <jsonHttpClient type="Sitecore.Framework.Publishing.Client.Http.JsonClient, Sitecore.Framework.Publishing.Client.Http" singleInstance="true">
                <!-- The location of the proxy to send requests through. -->
                <param name="proxyAddress">http://localhost:8888</param>

                <!-- Turn on/off the proxy capability.-->
                <param name="proxyEnabled">false</param>
            </jsonHttpClient>

            <!-- 
      # Publisher Operation Emitter 
      
      DataEngine Item events are collected by the emitter, and converted into PublisherOperations.  They are then batched up and sent to the service to be
      persisted (via the circuit breaker/recovery components).  The batching is performed on a time interval, or when a certain number of events are received - 
      which ever happens first.  It is optimal to send many events at once to the service (to avoid latency and database persistence overheads), but also to
      send events regularly so that when a publish job is executed, all relevant events have been recorded.
      -->
            <operationEmitter type="Sitecore.Publishing.Service.ItemEvents.ItemOperationEmitter, Sitecore.Publishing.Service" singleInstance="true">
                <param name="publisherOpsService" ref="publishing.service/publisherOpsService" />

                <!-- The interval at which an event batch is created to be sent to the service. -->
                <param name="eventBufferingWindowMaxMilliseconds">2000</param>

                <!-- The maximum size of an event batch that will be sent to the service. -->
                <param name="eventBufferingMaxCount">50</param>
            </operationEmitter>

            <!-- 
      # Internal services 
      -->
            <publishingJobProviderFactory type="Sitecore.Publishing.Service.JobQueue.PublishingJobProviderFactory, Sitecore.Publishing.Service" singleInstance="true" />
            <manifestProviderFactory type="Sitecore.Publishing.Service.Manifest.ManifestProviderFactory, Sitecore.Publishing.Service" singleInstance="true" />
            <publishingJobProvider type="Sitecore.Publishing.Service.Data.PublishingJobProvider, Sitecore.Publishing.Service" singleInstance="true" />
            <manifestProvider type="Sitecore.Publishing.Service.Data.ManifestProvider, Sitecore.Publishing.Service" singleInstance="true" />
            <targetCacheClearHistory type="Sitecore.Publishing.Service.Pipelines.BulkPublishingEnd.TargetCacheClearHistory, Sitecore.Publishing.Service" singleInstance="true" />

            <api>
                <services>
                    <allowedFullPublishRoles>
                        <!--This is a list of the roles that are able to perform a Full Re-publish-->
                        <role>sitecore\Publishing Service Administrator</role>
                    </allowedFullPublishRoles>
                </services>
            </api>

        </publishing.service>

        <!-- Configure the SPEAK controllers to be accessible. -->
        <api>
            <services>
                <configuration type="Sitecore.Services.Infrastructure.Configuration.ServicesConfiguration, Sitecore.Services.Infrastructure">
                    <allowedControllers hint="list:AddController">
                        <!-- Deploy to CM server only -->
                        <allowedController desc="PublishingJobController">Sitecore.Publishing.Service.Client.Services.Controllers.PublishingJobController, Sitecore.Publishing.Service.Client.Services</allowedController>
                        <allowedController desc="PublishingLanguageController">Sitecore.Publishing.Service.Client.Services.Controllers.PublishingLanguageController, Sitecore.Publishing.Service.Client.Services</allowedController>
                        <allowedController desc="PublishingTargetsController">Sitecore.Publishing.Service.Client.Services.Controllers.PublishingTargetsController, Sitecore.Publishing.Service.Client.Services</allowedController>
                        <allowedController desc="PublishingItemDetailsController">Sitecore.Publishing.Service.Client.Services.Controllers.PublishingItemDetailsController, Sitecore.Publishing.Service.Client.Services</allowedController>
                        <allowedController desc="PublishingMaintenanceController">Sitecore.Publishing.Service.Client.Services.Controllers.PublishingMaintenanceController, Sitecore.Publishing.Service.Client.Services</allowedController>
                    </allowedControllers>
                </configuration>
            </services>
        </api>

        <!-- 
    SITECORE COMMANDS
    -->
        <commands>
            <!-- Override the existing command that launches publish site dialog, to launch the new shiny one. -->
            <command name="system:publish">
                <patch:attribute name="type">Sitecore.Publishing.Service.Client.Commands.PublishSite, Sitecore.Publishing.Service.Client</patch:attribute>
            </command>

            <!-- Launches the publishing dashboard  -->
            <command name="shell:publishdashboard">
                <patch:attribute name="type">Sitecore.Publishing.Service.Client.Commands.OpenPublishDashboard,Sitecore.Publishing.Service.Client</patch:attribute>
            </command>

            <!-- Override the existing comand that launches the publish item dialog, to launch the new shiny one. -->
            <command name="item:publish">
                <patch:attribute name="type">Sitecore.Publishing.Service.Client.Commands.Publish, Sitecore.Publishing.Service.Client</patch:attribute>
            </command>

            <!-- Override the existing comand that launches the publish item dialog, to launch the new shiny one. -->
            <command name="item:publishnow">
                <patch:attribute name="type">Sitecore.Publishing.Service.Client.Commands.Publish, Sitecore.Publishing.Service.Client</patch:attribute>
            </command>
        </commands>

        <!--
    SITECORE EVENTS
    -->
        <events>

            <!-- When an item is saved -->
            <event name="item:saved">
                <handler patch:before="*[1]" type="Sitecore.Publishing.Service.Events.ItemSavedHandler, Sitecore.Publishing.Service" method="UpdateItemVariantRevisions" />
            </event>

            <!-- When a publishing job in the Publish Service starts -->
            <event name="publishingservice:publishbegin">

                <!-- Raises the existing publish:begin event. -->
                <handler type="Sitecore.Publishing.Service.Events.PublishBeginHandler, Sitecore.Publishing.Service" method="TriggerPublishBegin" />
            </event>

            <!-- When a publishing job in the Publish Service completes. -->
            <event name="publishingservice:publishend">

                <!-- When a publish job completes, the results (i.e. changes to the delivery data) are loaded in batches from the Publishing Service into the Sitecore process,
               and converted into Remote Item events, which are raised in the delivery target Event Queue. -->
                <handler type="Sitecore.Publishing.Service.Events.PublishingJobEndHandler, Sitecore.Publishing.Service" method="StartPublishEndPipeline">

                    <!-- The batch size for querying the manifest results from the Publishing service into the Sitecore process. -->
                    <param name="manifestResultLoadBatchSize">500</param>
                </handler>

                <!-- When a publish job completes, this handler will raise existing 'publish end' events, to maintain compatibility with componenents
             that integrate with the existing publishing system. -->
                <handler type="Sitecore.Publishing.Service.Events.PublishEndHandler, Sitecore.Publishing.Service" method="TriggerPublishEnd" />
            </event>

        </events>

        <!--
    SITECORE HOOKS
    -->
        <hooks>
            <!-- Registers the Publishing Service job end event with the Event system, to support config file subscriptions. -->
            <hook type="Sitecore.Publishing.Service.Hooks.PublishEventsHook, Sitecore.Publishing.Service" />
        </hooks>

        <!--
    SITECORE PIPELINES
    -->
        <pipelines>

            <!-- Defines the SPEAK JS dependencies -->
            <speak.client.buildMainJS>
                <processor type="Sitecore.Web.Pipelines.BuildMainJs.GetAllFiles, Sitecore.Speak.Client">
                    <files hint="raw:AddMainJs">
                        <file version="2" path="/sitecore/shell/client/Applications/Publishing/publishing-deps-config.json" />
                    </files>
                </processor>
            </speak.client.buildMainJS>

            <!-- 
      # Publisher End Result Pipeline
      
      This pipeline is called from publishingservice:publishend event handler which subscribes to the publish end event. Publish results will 
      be passed to this pipeline in batches. The size of the batch is defined by 'manifestResultLoadBatchSize' parameter specified within
      the publishingservice:publishend configuration section.
      -->
            <publishEndResultBatch argsType="Sitecore.Publishing.Service.Pipelines.BulkPublishingEnd.PublishEndResultBatchArgs">
                <processor type="Sitecore.Publishing.Service.Pipelines.BulkPublishingEnd.RaiseRemoteEvents, Sitecore.Publishing.Service">
                    <!-- The number maximum number of manifest steps for a publishing target below which Sitecore Remote Item Events are
                 added to the publishing target Event Queue table. Exceeding this threshold will raise cache clearing events instead.
                 !Warning: Too low a value could have a significant impact on the performance of the delivery instance. -->
                    <param name="remoteEventCacheClearingThreshold">1000</param>
                    <param name="targetCacheClearHistory" ref="publishing.service/targetCacheClearHistory" />
                </processor>
            </publishEndResultBatch>
        </pipelines>
    </sitecore>
</configuration>